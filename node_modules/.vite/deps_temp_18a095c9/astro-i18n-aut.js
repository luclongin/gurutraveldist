import "./chunk-UXIASGQL.js";

// node_modules/astro-i18n-aut/dist/edge-runtime/index.js
import virtualConfig from "virtual:astro-i18n-aut";
import { defineMiddleware } from "astro/middleware";
var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var trailingSlash = virtualConfig.trailingSlash;
var BASE_URL = virtualConfig.BASE_URL;
var defaultLocale = virtualConfig.defaultLocale;
var locales = virtualConfig.locales;
var localeKeys = Object.keys(virtualConfig.locales);
var redirectDefaultLocale = virtualConfig.redirectDefaultLocale;
var build = virtualConfig.build;
function removeTrailingSlash(url) {
  return url.at(-1) === "/" ? url.slice(0, -1) : url;
}
__name(removeTrailingSlash, "removeTrailingSlash");
function resolveTrailingSlash(url) {
  let pathName = typeof url == "string" ? url : url.pathname;
  return trailingSlash === "always" ? pathName.at(-1) !== "/" && (pathName = pathName + "/") : trailingSlash === "never" && pathName !== "/" && pathName.at(-1) === "/" && (pathName = pathName.slice(0, -1)), pathName;
}
__name(resolveTrailingSlash, "resolveTrailingSlash");
function removeHtmlExtension(url) {
  return url.endsWith(".html") ? url.slice(0, -5) : url;
}
__name(removeHtmlExtension, "removeHtmlExtension");
var i18nMiddleware = defineMiddleware((context, next) => {
  if (redirectDefaultLocale === false)
    return next();
  let status;
  typeof redirectDefaultLocale == "number" && (status = redirectDefaultLocale);
  let pathName = new URL(context.request.url).pathname, pathNameWithoutHtmlExtension = removeHtmlExtension(pathName), baseUrlWithoutTrailingSlash = removeTrailingSlash(BASE_URL), pathNameWithoutBaseUrl = BASE_URL === "/" ? pathNameWithoutHtmlExtension : pathNameWithoutHtmlExtension.replace(baseUrlWithoutTrailingSlash, ""), pathNameWithoutBaseUrlStartsWithDefaultLocale = pathNameWithoutBaseUrl.slice(1, 3) === defaultLocale;
  return pathNameWithoutBaseUrl.length === 3 && pathNameWithoutBaseUrlStartsWithDefaultLocale ? context.redirect(resolveTrailingSlash(BASE_URL), status) : pathNameWithoutBaseUrl[0] === "/" && pathNameWithoutBaseUrl[3] === "/" && pathNameWithoutBaseUrlStartsWithDefaultLocale ? context.redirect(resolveTrailingSlash(baseUrlWithoutTrailingSlash + pathNameWithoutBaseUrl.slice(3)), status) : next();
});
function filterCollectionByDefaultLocale(entry) {
  return !!(typeof entry == "object" && entry !== null && "slug" in entry && typeof entry.slug == "string" && entry.slug.startsWith(defaultLocale + "/"));
}
__name(filterCollectionByDefaultLocale, "filterCollectionByDefaultLocale");
function getCollectionParamsSlug(entries) {
  return entries.reduce((accumulator, entry) => (typeof entry == "object" && entry !== null && "slug" in entry && typeof entry.slug == "string" && accumulator.push({ params: { slug: entry.slug.replace(defaultLocale + "/", "") } }), accumulator), []);
}
__name(getCollectionParamsSlug, "getCollectionParamsSlug");
function getAllLocaleUrls(url) {
  let pathName = typeof url == "string" ? url : url.pathname, pathNameWithoutHtmlExtension = removeHtmlExtension(pathName), baseUrlWithoutTrailingSlash = removeTrailingSlash(BASE_URL), pathNameWithoutBaseUrl = BASE_URL === "/" ? pathNameWithoutHtmlExtension : pathNameWithoutHtmlExtension.replace(baseUrlWithoutTrailingSlash, ""), possibleLocaleKey = pathNameWithoutBaseUrl.slice(1, 3), pathNameWithoutBaseUrlStartsWithLocale = localeKeys.filter((key) => key !== defaultLocale).includes(possibleLocaleKey);
  return pathNameWithoutBaseUrl.length === 3 && pathNameWithoutBaseUrlStartsWithLocale ? { ...localeKeys.reduce((record, locale) => (record[locale] = resolveTrailingSlash(baseUrlWithoutTrailingSlash + "/" + locale + "/"), record), {}), [defaultLocale]: resolveTrailingSlash(BASE_URL) } : pathNameWithoutBaseUrl[0] === "/" && pathNameWithoutBaseUrl[3] === "/" && pathNameWithoutBaseUrlStartsWithLocale ? { ...localeKeys.reduce((record, locale) => (record[locale] = resolveTrailingSlash(baseUrlWithoutTrailingSlash + "/" + locale + pathNameWithoutBaseUrl.slice(3)), record), {}), [defaultLocale]: resolveTrailingSlash(baseUrlWithoutTrailingSlash + pathNameWithoutBaseUrl.slice(3)) } : { ...localeKeys.reduce((record, locale) => (record[locale] = resolveTrailingSlash(baseUrlWithoutTrailingSlash + "/" + locale + pathNameWithoutBaseUrl), record), {}), [defaultLocale]: resolveTrailingSlash(baseUrlWithoutTrailingSlash + pathNameWithoutBaseUrl) };
}
__name(getAllLocaleUrls, "getAllLocaleUrls");
function getLocale(url) {
  let pathName = typeof url == "string" ? url : url.pathname, pathNameWithoutHtmlExtension = removeHtmlExtension(pathName), baseUrlWithoutTrailingSlash = removeTrailingSlash(BASE_URL), pathNameWithoutBaseUrl = BASE_URL === "/" ? pathNameWithoutHtmlExtension : pathNameWithoutHtmlExtension.replace(baseUrlWithoutTrailingSlash, ""), possibleLocaleKey = pathNameWithoutBaseUrl.slice(1, 3), pathNameWithoutBaseUrlStartsWithLocale = localeKeys.filter((key) => key !== defaultLocale).includes(possibleLocaleKey);
  return pathNameWithoutBaseUrl.length === 3 && pathNameWithoutBaseUrlStartsWithLocale || pathNameWithoutBaseUrl[0] === "/" && pathNameWithoutBaseUrl[3] === "/" && pathNameWithoutBaseUrlStartsWithLocale ? possibleLocaleKey : defaultLocale;
}
__name(getLocale, "getLocale");
function getLocaleUrl(url, locale) {
  let pathName = typeof url == "string" ? url : url.pathname, pathNameWithoutHtmlExtension = removeHtmlExtension(pathName), baseUrlWithoutTrailingSlash = removeTrailingSlash(BASE_URL), pathNameWithoutBaseUrl = BASE_URL === "/" ? pathNameWithoutHtmlExtension : pathNameWithoutHtmlExtension.replace(baseUrlWithoutTrailingSlash, ""), possibleLocaleKey = pathNameWithoutBaseUrl.slice(1, 3), pathNameWithoutBaseUrlStartsWithLocale = localeKeys.filter((key) => key !== defaultLocale).includes(possibleLocaleKey);
  return pathNameWithoutBaseUrl.length === 3 && pathNameWithoutBaseUrlStartsWithLocale ? locale === defaultLocale ? resolveTrailingSlash(BASE_URL) : resolveTrailingSlash(baseUrlWithoutTrailingSlash + "/" + locale + "/") : pathNameWithoutBaseUrl[0] === "/" && pathNameWithoutBaseUrl[3] === "/" && pathNameWithoutBaseUrlStartsWithLocale ? locale === defaultLocale ? resolveTrailingSlash(baseUrlWithoutTrailingSlash + pathNameWithoutBaseUrl.slice(3)) : resolveTrailingSlash(baseUrlWithoutTrailingSlash + "/" + locale + pathNameWithoutBaseUrl.slice(3)) : locale === defaultLocale ? resolveTrailingSlash(baseUrlWithoutTrailingSlash + pathNameWithoutBaseUrl) : resolveTrailingSlash(baseUrlWithoutTrailingSlash + "/" + locale + pathNameWithoutBaseUrl);
}
__name(getLocaleUrl, "getLocaleUrl");
function getLocaleUrlPrefix(url) {
  let pathName = typeof url == "string" ? url : url.pathname, pathNameWithoutHtmlExtension = removeHtmlExtension(pathName), baseUrlWithoutTrailingSlash = removeTrailingSlash(BASE_URL), pathNameWithoutBaseUrl = BASE_URL === "/" ? pathNameWithoutHtmlExtension : pathNameWithoutHtmlExtension.replace(baseUrlWithoutTrailingSlash, ""), possibleLocaleKey = pathNameWithoutBaseUrl.slice(1, 3), pathNameWithoutBaseUrlStartsWithLocale = localeKeys.filter((key) => key !== defaultLocale).includes(possibleLocaleKey);
  return pathNameWithoutBaseUrl.length === 3 && pathNameWithoutBaseUrlStartsWithLocale || pathNameWithoutBaseUrl[0] === "/" && pathNameWithoutBaseUrl[3] === "/" && pathNameWithoutBaseUrlStartsWithLocale ? "/" + possibleLocaleKey : "";
}
__name(getLocaleUrlPrefix, "getLocaleUrlPrefix");
function getUrlWithoutLocale(url) {
  let pathName = typeof url == "string" ? url : url.pathname, pathNameWithoutHtmlExtension = removeHtmlExtension(pathName), baseUrlWithoutTrailingSlash = removeTrailingSlash(BASE_URL), pathNameWithoutBaseUrl = BASE_URL === "/" ? pathNameWithoutHtmlExtension : pathNameWithoutHtmlExtension.replace(baseUrlWithoutTrailingSlash, ""), possibleLocaleKey = pathNameWithoutBaseUrl.slice(1, 3), pathNameWithoutBaseUrlStartsWithLocale = localeKeys.filter((key) => key !== defaultLocale).includes(possibleLocaleKey);
  return pathNameWithoutBaseUrl.length === 3 && pathNameWithoutBaseUrlStartsWithLocale ? resolveTrailingSlash(BASE_URL) : pathNameWithoutBaseUrl[0] === "/" && pathNameWithoutBaseUrl[3] === "/" && pathNameWithoutBaseUrlStartsWithLocale ? resolveTrailingSlash(baseUrlWithoutTrailingSlash + pathNameWithoutBaseUrl.slice(3)) : resolveTrailingSlash(baseUrlWithoutTrailingSlash + pathNameWithoutBaseUrl);
}
__name(getUrlWithoutLocale, "getUrlWithoutLocale");
var defaultI18nConfig = { include: ["pages/**/*"], exclude: ["pages/api/**/*"], redirectDefaultLocale: 308 };
export {
  BASE_URL,
  build,
  defaultI18nConfig,
  defaultLocale,
  filterCollectionByDefaultLocale,
  getAllLocaleUrls,
  getCollectionParamsSlug,
  getLocale,
  getLocaleUrl,
  getLocaleUrlPrefix,
  getUrlWithoutLocale,
  i18nMiddleware,
  localeKeys,
  locales,
  resolveTrailingSlash,
  trailingSlash
};
//# sourceMappingURL=astro-i18n-aut.js.map
