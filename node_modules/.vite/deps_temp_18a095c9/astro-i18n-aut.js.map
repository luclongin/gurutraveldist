{
  "version": 3,
  "sources": ["../../astro-i18n-aut/src/edge-runtime/config.ts", "../../astro-i18n-aut/src/edge-runtime/middleware.ts", "../../astro-i18n-aut/src/edge-runtime/removeTrailingSlash.ts", "../../astro-i18n-aut/src/edge-runtime/resolveTrailingSlash.ts", "../../astro-i18n-aut/src/edge-runtime/removeHtmlExtension.ts", "../../astro-i18n-aut/src/edge-runtime/filterCollectionByDefaultLocale.ts", "../../astro-i18n-aut/src/edge-runtime/getCollectionParamsSlug.ts", "../../astro-i18n-aut/src/edge-runtime/getAllLocaleUrls.ts", "../../astro-i18n-aut/src/edge-runtime/getLocale.ts", "../../astro-i18n-aut/src/edge-runtime/getLocaleUrl.ts", "../../astro-i18n-aut/src/edge-runtime/getLocaleUrlPrefix.ts", "../../astro-i18n-aut/src/edge-runtime/getUrlWithoutLocale.ts", "../../astro-i18n-aut/src/shared/configs.ts"],
  "sourcesContent": ["import virtualConfig from \"virtual:astro-i18n-aut\";\n\nexport const trailingSlash = virtualConfig.trailingSlash;\nexport const BASE_URL = virtualConfig.BASE_URL;\nexport const defaultLocale = virtualConfig.defaultLocale;\nexport const locales = virtualConfig.locales;\nexport const localeKeys = Object.keys(virtualConfig.locales);\nexport const redirectDefaultLocale = virtualConfig.redirectDefaultLocale;\nexport const build = virtualConfig.build;\n", "import type { ValidRedirectStatus } from \"astro\";\nimport { defineMiddleware } from \"astro/middleware\";\nimport {\n  defaultLocale,\n  redirectDefaultLocale,\n  BASE_URL as baseUrl,\n} from \"./config\";\nimport { removeTrailingSlash } from \"./removeTrailingSlash\";\nimport { resolveTrailingSlash } from \"./resolveTrailingSlash\";\nimport { removeHtmlExtension } from \"./removeHtmlExtension\";\n\nexport const i18nMiddleware = defineMiddleware((context, next) => {\n  if (redirectDefaultLocale === false) {\n    return next();\n  }\n\n  let status: ValidRedirectStatus | undefined;\n  if (typeof redirectDefaultLocale === \"number\") {\n    status = redirectDefaultLocale;\n  }\n\n  const pathName = new URL(context.request.url).pathname;\n  const pathNameWithoutHtmlExtension = removeHtmlExtension(pathName);\n\n  const baseUrlWithoutTrailingSlash = removeTrailingSlash(baseUrl);\n\n  // remove baseUrlWithoutTrailingSlash from pathNameWithoutBaseUrl\n  let pathNameWithoutBaseUrl =\n    baseUrl === \"/\"\n      ? pathNameWithoutHtmlExtension\n      : pathNameWithoutHtmlExtension.replace(baseUrlWithoutTrailingSlash, \"\");\n\n  const pathNameWithoutBaseUrlStartsWithDefaultLocale =\n    pathNameWithoutBaseUrl.slice(1, 3) === defaultLocale;\n\n  // avoid catching urls that start with \"/en\" like \"/enigma\"\n  if (\n    pathNameWithoutBaseUrl.length === 3 &&\n    pathNameWithoutBaseUrlStartsWithDefaultLocale\n  ) {\n    return context.redirect(resolveTrailingSlash(baseUrl), status);\n  }\n  // catch all \"/en/**/*\" urls\n  if (\n    pathNameWithoutBaseUrl[0] === \"/\" &&\n    pathNameWithoutBaseUrl[3] === \"/\" &&\n    pathNameWithoutBaseUrlStartsWithDefaultLocale\n  ) {\n    return context.redirect(\n      resolveTrailingSlash(\n        baseUrlWithoutTrailingSlash + pathNameWithoutBaseUrl.slice(3)\n      ),\n      status\n    );\n  }\n  // otherwise, it must be a defaultLocale or other url\n  return next();\n});\n", "export function removeTrailingSlash(url: string) {\n  return url.at(-1) === \"/\" ? url.slice(0, -1) : url;\n}\n", "import { trailingSlash } from \"./config\";\n\nexport function resolveTrailingSlash(url: URL | string): string {\n  let pathName = typeof url === \"string\" ? url : url.pathname;\n\n  if (trailingSlash === \"always\") {\n    if (pathName.at(-1) !== \"/\") {\n      pathName = pathName + \"/\";\n    }\n  } else if (trailingSlash === \"never\") {\n    if (pathName !== \"/\" && pathName.at(-1) === \"/\") {\n      pathName = pathName.slice(0, -1);\n    }\n  }\n  return pathName;\n}\n", "export function removeHtmlExtension(url: string) {\n  return url.endsWith(\".html\") ? url.slice(0, -\".html\".length) : url;\n}\n", "import { defaultLocale } from \"./config\";\n\nexport function filterCollectionByDefaultLocale(entry: unknown) {\n  if (\n    typeof entry === \"object\" &&\n    entry !== null &&\n    \"slug\" in entry &&\n    typeof entry.slug === \"string\"\n  ) {\n    if (entry.slug.startsWith(defaultLocale + \"/\")) {\n      return true;\n    }\n  }\n  return false;\n}\n", "import { defaultLocale } from \"./config\";\n\nexport function getCollectionParamsSlug(entries: unknown[]) {\n  return entries.reduce<{ params: { slug: string } }[]>(\n    (accumulator, entry) => {\n      if (\n        typeof entry === \"object\" &&\n        entry !== null &&\n        \"slug\" in entry &&\n        typeof entry.slug === \"string\"\n      ) {\n        accumulator.push({\n          params: { slug: entry.slug.replace(defaultLocale + \"/\", \"\") },\n        });\n      }\n      return accumulator;\n    },\n    []\n  );\n}\n", "import {\n  // astro `BASE_URL` always starts with `/` and respects `config.trailingSlash`\n  BASE_URL as baseUrl,\n  defaultLocale,\n  localeKeys,\n} from \"./config\";\nimport { resolveTrailingSlash } from \"./resolveTrailingSlash\";\nimport { removeTrailingSlash } from \"./removeTrailingSlash\";\nimport { removeHtmlExtension } from \"./removeHtmlExtension\";\n/**\n * @returns url with chosen locale prefix\n *  * @example\n * ```ts\n * getAllLocaleUrls(\"/es/about\") // { en: \"/about\", \"es\": \"/es/about\" }\n * ```\n * @example\n * ```ts\n * getAllLocaleUrls(\"/about\") // { en: \"/about\", \"es\": \"/es/about\" }\n * ```\n */\nexport function getAllLocaleUrls(url: URL | string): Record<string, string> {\n  // support both string and url objects\n  const pathName = typeof url === \"string\" ? url : url.pathname;\n  const pathNameWithoutHtmlExtension = removeHtmlExtension(pathName);\n\n  const baseUrlWithoutTrailingSlash = removeTrailingSlash(baseUrl);\n\n  // remove baseUrlWithoutTrailingSlash from pathNameWithoutBaseUrl\n  let pathNameWithoutBaseUrl =\n    baseUrl === \"/\"\n      ? pathNameWithoutHtmlExtension\n      : pathNameWithoutHtmlExtension.replace(baseUrlWithoutTrailingSlash, \"\");\n\n  const possibleLocaleKey = pathNameWithoutBaseUrl.slice(1, 3);\n  const pathNameWithoutBaseUrlStartsWithLocale = localeKeys\n    .filter((key) => key !== defaultLocale)\n    .includes(possibleLocaleKey);\n\n  // avoid catching original urls that start with \"/en\" like \"/enigma\"\n  if (\n    pathNameWithoutBaseUrl.length === 3 &&\n    pathNameWithoutBaseUrlStartsWithLocale\n  ) {\n    return {\n      ...localeKeys.reduce<Record<string, string>>((record, locale) => {\n        record[locale] = resolveTrailingSlash(\n          baseUrlWithoutTrailingSlash + \"/\" + locale + \"/\"\n        );\n        return record;\n      }, {}),\n      [defaultLocale]: resolveTrailingSlash(baseUrl),\n    };\n  }\n  if (\n    pathNameWithoutBaseUrl[0] === \"/\" &&\n    pathNameWithoutBaseUrl[3] === \"/\" &&\n    pathNameWithoutBaseUrlStartsWithLocale\n  ) {\n    // catch all \"/fr/**/*\" original urls\n    return {\n      ...localeKeys.reduce<Record<string, string>>((record, locale) => {\n        record[locale] = resolveTrailingSlash(\n          baseUrlWithoutTrailingSlash +\n            \"/\" +\n            locale +\n            pathNameWithoutBaseUrl.slice(3)\n        );\n        return record;\n      }, {}),\n      [defaultLocale]: resolveTrailingSlash(\n        baseUrlWithoutTrailingSlash + pathNameWithoutBaseUrl.slice(3)\n      ),\n    };\n  }\n\n  // otherwise, original url must be a defaultLocale or other url\n  return {\n    ...localeKeys.reduce<Record<string, string>>((record, locale) => {\n      record[locale] = resolveTrailingSlash(\n        baseUrlWithoutTrailingSlash + \"/\" + locale + pathNameWithoutBaseUrl\n      );\n      return record;\n    }, {}),\n    [defaultLocale]: resolveTrailingSlash(\n      baseUrlWithoutTrailingSlash + pathNameWithoutBaseUrl\n    ),\n  };\n}\n", "import {\n  // astro `BASE_URL` always starts with `/` and respects `config.trailingSlash`\n  BASE_URL as baseUrl,\n  defaultLocale,\n  localeKeys,\n} from \"./config\";\nimport { removeHtmlExtension } from \"./removeHtmlExtension\";\nimport { removeTrailingSlash } from \"./removeTrailingSlash\";\n\n/**\n * @returns locale key\n * @example\n * ```ts\n * getLocale(\"/es/about\") // \"es\"\n * ```\n * @example\n * ```ts\n * getLocale(\"/about\") // \"en\"\n * ```\n */\nexport function getLocale(url: URL | string): string {\n  // support both string and url objects\n  const pathName = typeof url === \"string\" ? url : url.pathname;\n  const pathNameWithoutHtmlExtension = removeHtmlExtension(pathName);\n  // astro `BASE_URL` always starts with `/` and respects `config.trailingSlash`\n\n  const baseUrlWithoutTrailingSlash = removeTrailingSlash(baseUrl);\n\n  // remove baseUrlWithoutTrailingSlash from pathNameWithoutBaseUrl\n  let pathNameWithoutBaseUrl =\n    baseUrl === \"/\"\n      ? pathNameWithoutHtmlExtension\n      : pathNameWithoutHtmlExtension.replace(baseUrlWithoutTrailingSlash, \"\");\n\n  const possibleLocaleKey = pathNameWithoutBaseUrl.slice(1, 3);\n  const pathNameWithoutBaseUrlStartsWithLocale = localeKeys\n    .filter((key) => key !== defaultLocale)\n    .includes(possibleLocaleKey);\n\n  // avoid catching urls that start with \"/en\" like \"/enigma\"\n  if (\n    pathNameWithoutBaseUrl.length === 3 &&\n    pathNameWithoutBaseUrlStartsWithLocale\n  ) {\n    return possibleLocaleKey;\n  }\n  if (\n    pathNameWithoutBaseUrl[0] === \"/\" &&\n    pathNameWithoutBaseUrl[3] === \"/\" &&\n    pathNameWithoutBaseUrlStartsWithLocale\n  ) {\n    // catch all \"/fr/**/*\" urls\n    return possibleLocaleKey;\n  }\n  // otherwise, it must be a defaultLocale or other url\n  return defaultLocale;\n}\n", "import {\n  // astro `BASE_URL` always starts with `/` and respects `config.trailingSlash`\n  BASE_URL as baseUrl,\n  defaultLocale,\n  localeKeys,\n} from \"./config\";\nimport { resolveTrailingSlash } from \"./resolveTrailingSlash\";\nimport { removeTrailingSlash } from \"./removeTrailingSlash\";\nimport { removeHtmlExtension } from \"./removeHtmlExtension\";\n/**\n * @returns url with chosen locale prefix\n *  * @example\n * ```ts\n * getLocaleUrl(\"/es/about\", \"en\") // \"/about\"\n * ```\n *  * @example\n * ```ts\n * getLocaleUrl(\"/es/about\", \"fr\") // \"/fr/about\"\n * ```\n * @example\n * ```ts\n * getLocaleUrl(\"/about\", \"es\") // \"/es/about\"\n * ```\n */\n/**\n * @returns url with chosen locale prefix\n *  * @example\n * ```ts\n * getLocaleUrl(\"/es/about\", \"en\") // \"/about\"\n * ```\n *  * @example\n * ```ts\n * getLocaleUrl(\"/es/about\", \"fr\") // \"/fr/about\"\n * ```\n * @example\n * ```ts\n * getLocaleUrl(\"/about\", \"es\") // \"/es/about\"\n * ```\n */\nexport function getLocaleUrl(url: URL | string, locale: string): string {\n  // support both string and url objects\n  const pathName = typeof url === \"string\" ? url : url.pathname;\n  const pathNameWithoutHtmlExtension = removeHtmlExtension(pathName);\n\n  const baseUrlWithoutTrailingSlash = removeTrailingSlash(baseUrl);\n\n  // remove baseUrlWithoutTrailingSlash from pathNameWithoutBaseUrl\n  let pathNameWithoutBaseUrl =\n    baseUrl === \"/\"\n      ? pathNameWithoutHtmlExtension\n      : pathNameWithoutHtmlExtension.replace(baseUrlWithoutTrailingSlash, \"\");\n\n  const possibleLocaleKey = pathNameWithoutBaseUrl.slice(1, 3);\n  const pathNameWithoutBaseUrlStartsWithLocale = localeKeys\n    .filter((key) => key !== defaultLocale)\n    .includes(possibleLocaleKey);\n\n  // avoid catching original urls that start with \"/en\" like \"/enigma\"\n  if (\n    pathNameWithoutBaseUrl.length === 3 &&\n    pathNameWithoutBaseUrlStartsWithLocale\n  ) {\n    if (locale === defaultLocale) {\n      return resolveTrailingSlash(baseUrl);\n    }\n\n    return resolveTrailingSlash(\n      baseUrlWithoutTrailingSlash + \"/\" + locale + \"/\"\n    );\n  }\n  if (\n    pathNameWithoutBaseUrl[0] === \"/\" &&\n    pathNameWithoutBaseUrl[3] === \"/\" &&\n    pathNameWithoutBaseUrlStartsWithLocale\n  ) {\n    // catch all \"/fr/**/*\" original urls\n    if (locale === defaultLocale) {\n      return resolveTrailingSlash(\n        baseUrlWithoutTrailingSlash + pathNameWithoutBaseUrl.slice(3)\n      );\n    }\n    return resolveTrailingSlash(\n      baseUrlWithoutTrailingSlash +\n        \"/\" +\n        locale +\n        pathNameWithoutBaseUrl.slice(3)\n    );\n  }\n  // otherwise, original url must be a defaultLocale or other url\n  if (locale === defaultLocale) {\n    return resolveTrailingSlash(\n      baseUrlWithoutTrailingSlash + pathNameWithoutBaseUrl\n    );\n  }\n  return resolveTrailingSlash(\n    baseUrlWithoutTrailingSlash + \"/\" + locale + pathNameWithoutBaseUrl\n  );\n}\n", "import {\n  // astro `BASE_URL` always starts with `/` and respects `config.trailingSlash`\n  BASE_URL as baseUrl,\n  localeKeys,\n  defaultLocale,\n} from \"./config\";\nimport { removeHtmlExtension } from \"./removeHtmlExtension\";\nimport { removeTrailingSlash } from \"./removeTrailingSlash\";\n\n/**\n * @returns locale prefix or an empty string if defaultLocale\n * @example\n * ```ts\n * getLocaleUrlPrefix(\"/es/about\") // \"/es\"\n * ```\n * @example\n * ```ts\n * getLocale(\"/about\") // \"\"\n * ```\n */\nexport function getLocaleUrlPrefix(url: URL | string): string {\n  // support both string and url objects\n  const pathName = typeof url === \"string\" ? url : url.pathname;\n  const pathNameWithoutHtmlExtension = removeHtmlExtension(pathName);\n\n  const baseUrlWithoutTrailingSlash = removeTrailingSlash(baseUrl);\n\n  // remove baseUrlWithoutTrailingSlash from pathNameWithoutBaseUrl\n  let pathNameWithoutBaseUrl =\n    baseUrl === \"/\"\n      ? pathNameWithoutHtmlExtension\n      : pathNameWithoutHtmlExtension.replace(baseUrlWithoutTrailingSlash, \"\");\n\n  const possibleLocaleKey = pathNameWithoutBaseUrl.slice(1, 3);\n  const pathNameWithoutBaseUrlStartsWithLocale = localeKeys\n    .filter((key) => key !== defaultLocale)\n    .includes(possibleLocaleKey);\n\n  // avoid catching urls that start with \"/en\" like \"/enigma\"\n  if (\n    pathNameWithoutBaseUrl.length === 3 &&\n    pathNameWithoutBaseUrlStartsWithLocale\n  ) {\n    return \"/\" + possibleLocaleKey;\n  }\n  if (\n    pathNameWithoutBaseUrl[0] === \"/\" &&\n    pathNameWithoutBaseUrl[3] === \"/\" &&\n    pathNameWithoutBaseUrlStartsWithLocale\n  ) {\n    // catch all \"/fr/**/*\" urls\n    return \"/\" + possibleLocaleKey;\n  }\n  // otherwise, it must be a defaultLocale or other url\n  return \"\";\n}\n", "import {\n  // astro `BASE_URL` always starts with `/` and respects `config.trailingSlash`\n  BASE_URL as baseUrl,\n  localeKeys,\n  defaultLocale,\n} from \"./config\";\nimport { removeHtmlExtension } from \"./removeHtmlExtension\";\nimport { removeTrailingSlash } from \"./removeTrailingSlash\";\nimport { resolveTrailingSlash } from \"./resolveTrailingSlash\";\n/**\n * @returns url without locale prefix, \"/es/about\" => \"/about\"\n */\nexport function getUrlWithoutLocale(url: URL | string): string {\n  // support both string and url objects\n  const pathName = typeof url === \"string\" ? url : url.pathname;\n  const pathNameWithoutHtmlExtension = removeHtmlExtension(pathName);\n\n  const baseUrlWithoutTrailingSlash = removeTrailingSlash(baseUrl);\n\n  // remove baseUrlWithoutTrailingSlash from pathNameWithoutBaseUrl\n  let pathNameWithoutBaseUrl =\n    baseUrl === \"/\"\n      ? pathNameWithoutHtmlExtension\n      : pathNameWithoutHtmlExtension.replace(baseUrlWithoutTrailingSlash, \"\");\n\n  const possibleLocaleKey = pathNameWithoutBaseUrl.slice(1, 3);\n  const pathNameWithoutBaseUrlStartsWithLocale = localeKeys\n    .filter((key) => key !== defaultLocale)\n    .includes(possibleLocaleKey);\n\n  // avoid catching urls that start with \"/en\" like \"/enigma\"\n  if (\n    pathNameWithoutBaseUrl.length === 3 &&\n    pathNameWithoutBaseUrlStartsWithLocale\n  ) {\n    return resolveTrailingSlash(baseUrl);\n  }\n  if (\n    pathNameWithoutBaseUrl[0] === \"/\" &&\n    pathNameWithoutBaseUrl[3] === \"/\" &&\n    pathNameWithoutBaseUrlStartsWithLocale\n  ) {\n    // catch all \"/fr/**/*\" urls\n    return resolveTrailingSlash(\n      baseUrlWithoutTrailingSlash + pathNameWithoutBaseUrl.slice(3)\n    );\n  }\n  // otherwise, it must be a defaultLocale or other url\n  return resolveTrailingSlash(\n    baseUrlWithoutTrailingSlash + pathNameWithoutBaseUrl\n  );\n}\n", "import type { AstroConfig, ValidRedirectStatus } from \"astro\";\n\nexport interface UserI18nConfig {\n  /**\n   * glob pattern(s) to include\n   * @defaultValue [\"pages\\/\\*\\*\\/\\*\"]\n   */\n  include?: string | string[];\n  /**\n   * glob pattern(s) to exclude\n   * @defaultValue [\"pages\\/api\\/\\*\\*\\/\\*\"]\n   */\n  exclude?: string | string[];\n  /**\n   * all language locales\n   *\n   * @example\n   * ```ts\n   * const locales = {\n   *   en: \"en-US\", // the `defaultLocale` value must present in `locales` keys\n   *   es: \"es-ES\",\n   *   fr: \"fr-CA\",\n   * };\n   * ```\n   */\n  locales: Record<string, string>;\n  /**\n   * the default language locale\n   *\n   * the `defaultLocale` value must present in `locales` keys\n   *\n   * @example \"en\"\n   */\n  defaultLocale: string;\n  /**\n   * given the defaultLocale \"en\", whether\n   * \"/en/about\" redirects to \"/about\"\n   *\n   * whether the url with the default locale\n   * should redirect to the url without the locale\n   *\n   * if a status is given, such as 302,\n   * redirectDefaultLocale will be truthy,\n   * and all redirects will use that status\n   *\n   * @defaultValue true\n   */\n  redirectDefaultLocale?: boolean | ValidRedirectStatus;\n}\n\nexport type VirtualAstroi18nautConfig = Pick<\n  UserI18nConfig,\n  \"defaultLocale\" | \"locales\" | \"redirectDefaultLocale\"\n> & {\n  BASE_URL: string;\n  trailingSlash: AstroConfig[\"trailingSlash\"];\n  build: {\n    format: AstroConfig[\"build\"][\"format\"];\n  };\n};\n\nexport type UserFilterSitemapByDefaultLocaleConfig = Pick<\n  UserI18nConfig,\n  \"defaultLocale\"\n> & {\n  base: string;\n};\n\nexport type I18nConfig = Required<UserI18nConfig>;\n\n// opposite of RequiredFieldsOnly https://stackoverflow.com/a/68261391\ntype PartialFieldsOnly<T> = {\n  [K in keyof T as T[K] extends Required<T>[K] ? never : K]: T[K];\n};\n\n/**\n * The default values for I18nConfig\n */\nexport const defaultI18nConfig: Required<PartialFieldsOnly<UserI18nConfig>> = {\n  include: [\"pages/**/*\"],\n  exclude: [\"pages/api/**/*\"],\n  redirectDefaultLocale: 308,\n};\n"],
  "mappings": "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",
  "names": []
}
